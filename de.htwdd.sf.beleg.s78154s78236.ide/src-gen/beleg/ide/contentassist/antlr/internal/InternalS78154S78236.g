/*
 * generated by Xtext 2.13.0
 */
grammar InternalS78154S78236;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package beleg.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package beleg.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import beleg.services.S78154S78236GrammarAccess;

}
@parser::members {
	private S78154S78236GrammarAccess grammarAccess;

	public void setGrammarAccess(S78154S78236GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRulePrologDsl
entryRulePrologDsl
:
{ before(grammarAccess.getPrologDslRule()); }
	 rulePrologDsl
{ after(grammarAccess.getPrologDslRule()); } 
	 EOF 
;

// Rule PrologDsl
rulePrologDsl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrologDslAccess().getGroup()); }
		(rule__PrologDsl__Group__0)
		{ after(grammarAccess.getPrologDslAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getProgramAccess().getClausesAssignment()); }
			(rule__Program__ClausesAssignment)
			{ after(grammarAccess.getProgramAccess().getClausesAssignment()); }
		)
		(
			{ before(grammarAccess.getProgramAccess().getClausesAssignment()); }
			(rule__Program__ClausesAssignment)*
			{ after(grammarAccess.getProgramAccess().getClausesAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExquery
entryRuleExquery
:
{ before(grammarAccess.getExqueryRule()); }
	 ruleExquery
{ after(grammarAccess.getExqueryRule()); } 
	 EOF 
;

// Rule Exquery
ruleExquery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExqueryAccess().getGroup()); }
		(rule__Exquery__Group__0)
		{ after(grammarAccess.getExqueryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQuery
entryRuleQuery
:
{ before(grammarAccess.getQueryRule()); }
	 ruleQuery
{ after(grammarAccess.getQueryRule()); } 
	 EOF 
;

// Rule Query
ruleQuery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQueryAccess().getGroup()); }
		(rule__Query__Group__0)
		{ after(grammarAccess.getQueryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEPredicate
entryRuleEPredicate
:
{ before(grammarAccess.getEPredicateRule()); }
	 ruleEPredicate
{ after(grammarAccess.getEPredicateRule()); } 
	 EOF 
;

// Rule EPredicate
ruleEPredicate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEPredicateAccess().getGroup()); }
		(rule__EPredicate__Group__0)
		{ after(grammarAccess.getEPredicateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClause
entryRuleClause
:
{ before(grammarAccess.getClauseRule()); }
	 ruleClause
{ after(grammarAccess.getClauseRule()); } 
	 EOF 
;

// Rule Clause
ruleClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClauseAccess().getGroup()); }
		(rule__Clause__Group__0)
		{ after(grammarAccess.getClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFact
entryRuleFact
:
{ before(grammarAccess.getFactRule()); }
	 ruleFact
{ after(grammarAccess.getFactRule()); } 
	 EOF 
;

// Rule Fact
ruleFact 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFactAccess().getGroup()); }
		(rule__Fact__Group__0)
		{ after(grammarAccess.getFactAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRule
entryRuleRule
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleAccess().getGroup()); }
		(rule__Rule__Group__0)
		{ after(grammarAccess.getRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredicate
entryRulePredicate
:
{ before(grammarAccess.getPredicateRule()); }
	 rulePredicate
{ after(grammarAccess.getPredicateRule()); } 
	 EOF 
;

// Rule Predicate
rulePredicate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredicateAccess().getGroup()); }
		(rule__Predicate__Group__0)
		{ after(grammarAccess.getPredicateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctor
entryRuleFunctor
:
{ before(grammarAccess.getFunctorRule()); }
	 ruleFunctor
{ after(grammarAccess.getFunctorRule()); } 
	 EOF 
;

// Rule Functor
ruleFunctor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctorAccess().getIdentAssignment()); }
		(rule__Functor__IdentAssignment)
		{ after(grammarAccess.getFunctorAccess().getIdentAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerm
entryRuleTerm
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTermAccess().getAlternatives()); }
		(rule__Term__Alternatives)
		{ after(grammarAccess.getTermAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleETerm
entryRuleETerm
:
{ before(grammarAccess.getETermRule()); }
	 ruleETerm
{ after(grammarAccess.getETermRule()); } 
	 EOF 
;

// Rule ETerm
ruleETerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getETermAccess().getGroup()); }
		(rule__ETerm__Group__0)
		{ after(grammarAccess.getETermAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtom
entryRuleAtom
:
{ before(grammarAccess.getAtomRule()); }
	 ruleAtom
{ after(grammarAccess.getAtomRule()); } 
	 EOF 
;

// Rule Atom
ruleAtom 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomAccess().getAlternatives()); }
		(rule__Atom__Alternatives)
		{ after(grammarAccess.getAtomAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleList
entryRuleList
:
{ before(grammarAccess.getListRule()); }
	 ruleList
{ after(grammarAccess.getListRule()); } 
	 EOF 
;

// Rule List
ruleList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListAccess().getAlternatives()); }
		(rule__List__Alternatives)
		{ after(grammarAccess.getListAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEmptyList
entryRuleEmptyList
:
{ before(grammarAccess.getEmptyListRule()); }
	 ruleEmptyList
{ after(grammarAccess.getEmptyListRule()); } 
	 EOF 
;

// Rule EmptyList
ruleEmptyList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEmptyListAccess().getGroup()); }
		(rule__EmptyList__Group__0)
		{ after(grammarAccess.getEmptyListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNonEmptyList
entryRuleNonEmptyList
:
{ before(grammarAccess.getNonEmptyListRule()); }
	 ruleNonEmptyList
{ after(grammarAccess.getNonEmptyListRule()); } 
	 EOF 
;

// Rule NonEmptyList
ruleNonEmptyList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNonEmptyListAccess().getAlternatives()); }
		(rule__NonEmptyList__Alternatives)
		{ after(grammarAccess.getNonEmptyListAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFolge
entryRuleFolge
:
{ before(grammarAccess.getFolgeRule()); }
	 ruleFolge
{ after(grammarAccess.getFolgeRule()); } 
	 EOF 
;

// Rule Folge
ruleFolge 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFolgeAccess().getGroup()); }
		(rule__Folge__Group__0)
		{ after(grammarAccess.getFolgeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEFolge
entryRuleEFolge
:
{ before(grammarAccess.getEFolgeRule()); }
	 ruleEFolge
{ after(grammarAccess.getEFolgeRule()); } 
	 EOF 
;

// Rule EFolge
ruleEFolge 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEFolgeAccess().getGroup()); }
		(rule__EFolge__Group__0)
		{ after(grammarAccess.getEFolgeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEList
entryRuleEList
:
{ before(grammarAccess.getEListRule()); }
	 ruleEList
{ after(grammarAccess.getEListRule()); } 
	 EOF 
;

// Rule EList
ruleEList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEListAccess().getGroup()); }
		(rule__EList__Group__0)
		{ after(grammarAccess.getEListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEAtom
entryRuleEAtom
:
{ before(grammarAccess.getEAtomRule()); }
	 ruleEAtom
{ after(grammarAccess.getEAtomRule()); } 
	 EOF 
;

// Rule EAtom
ruleEAtom 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEAtomAccess().getGroup()); }
		(rule__EAtom__Group__0)
		{ after(grammarAccess.getEAtomAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIdent
entryRuleIdent
:
{ before(grammarAccess.getIdentRule()); }
	 ruleIdent
{ after(grammarAccess.getIdentRule()); } 
	 EOF 
;

// Rule Ident
ruleIdent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIdentAccess().getIdentAssignment()); }
		(rule__Ident__IdentAssignment)
		{ after(grammarAccess.getIdentAccess().getIdentAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEVar
entryRuleEVar
:
{ before(grammarAccess.getEVarRule()); }
	 ruleEVar
{ after(grammarAccess.getEVarRule()); } 
	 EOF 
;

// Rule EVar
ruleEVar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEVarAccess().getVariableAssignment()); }
		(rule__EVar__VariableAssignment)
		{ after(grammarAccess.getEVarAccess().getVariableAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getFactAssignment_1_0()); }
		(rule__Clause__FactAssignment_1_0)
		{ after(grammarAccess.getClauseAccess().getFactAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getClauseAccess().getRuleAssignment_1_1()); }
		(rule__Clause__RuleAssignment_1_1)
		{ after(grammarAccess.getClauseAccess().getRuleAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getAtomAssignment_0()); }
		(rule__Term__AtomAssignment_0)
		{ after(grammarAccess.getTermAccess().getAtomAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getListAssignment_1()); }
		(rule__Term__ListAssignment_1)
		{ after(grammarAccess.getTermAccess().getListAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getIdentAssignment_0()); }
		(rule__Atom__IdentAssignment_0)
		{ after(grammarAccess.getAtomAccess().getIdentAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getNumberAssignment_1()); }
		(rule__Atom__NumberAssignment_1)
		{ after(grammarAccess.getAtomAccess().getNumberAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getEvarAssignment_2()); }
		(rule__Atom__EvarAssignment_2)
		{ after(grammarAccess.getAtomAccess().getEvarAssignment_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getEmptyAssignment_0()); }
		(rule__List__EmptyAssignment_0)
		{ after(grammarAccess.getListAccess().getEmptyAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getListAccess().getNonEmptyListAssignment_1()); }
		(rule__List__NonEmptyListAssignment_1)
		{ after(grammarAccess.getListAccess().getNonEmptyListAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NonEmptyList__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNonEmptyListAccess().getEfolgeAssignment_0()); }
		(rule__NonEmptyList__EfolgeAssignment_0)
		{ after(grammarAccess.getNonEmptyListAccess().getEfolgeAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getNonEmptyListAccess().getElistAssignment_1()); }
		(rule__NonEmptyList__ElistAssignment_1)
		{ after(grammarAccess.getNonEmptyListAccess().getElistAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrologDsl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrologDsl__Group__0__Impl
	rule__PrologDsl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrologDsl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrologDslAccess().getProgramAssignment_0()); }
	(rule__PrologDsl__ProgramAssignment_0)
	{ after(grammarAccess.getPrologDslAccess().getProgramAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrologDsl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrologDsl__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrologDsl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrologDslAccess().getExQueryAssignment_1()); }
	(rule__PrologDsl__ExQueryAssignment_1)
	{ after(grammarAccess.getPrologDslAccess().getExQueryAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exquery__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exquery__Group__0__Impl
	rule__Exquery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exquery__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExqueryAccess().getQuestionMarkHyphenMinusKeyword_0()); }
	'?-'
	{ after(grammarAccess.getExqueryAccess().getQuestionMarkHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exquery__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exquery__Group__1__Impl
	rule__Exquery__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Exquery__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExqueryAccess().getQueryAssignment_1()); }
	(rule__Exquery__QueryAssignment_1)
	{ after(grammarAccess.getExqueryAccess().getQueryAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exquery__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exquery__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exquery__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExqueryAccess().getFullStopKeyword_2()); }
	'.'
	{ after(grammarAccess.getExqueryAccess().getFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group__0__Impl
	rule__Query__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getPredicateAssignment_0()); }
	(rule__Query__PredicateAssignment_0)
	{ after(grammarAccess.getQueryAccess().getPredicateAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getEpredicatesAssignment_1()); }
	(rule__Query__EpredicatesAssignment_1)*
	{ after(grammarAccess.getQueryAccess().getEpredicatesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EPredicate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EPredicate__Group__0__Impl
	rule__EPredicate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EPredicate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEPredicateAccess().getCommaKeyword_0()); }
	','
	{ after(grammarAccess.getEPredicateAccess().getCommaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EPredicate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EPredicate__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EPredicate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEPredicateAccess().getPredicateAssignment_1()); }
	(rule__EPredicate__PredicateAssignment_1)
	{ after(grammarAccess.getEPredicateAccess().getPredicateAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Clause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group__0__Impl
	rule__Clause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getPredicateAssignment_0()); }
	(rule__Clause__PredicateAssignment_0)
	{ after(grammarAccess.getClauseAccess().getPredicateAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getAlternatives_1()); }
	(rule__Clause__Alternatives_1)
	{ after(grammarAccess.getClauseAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Fact__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fact__Group__0__Impl
	rule__Fact__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactAccess().getFactAction_0()); }
	()
	{ after(grammarAccess.getFactAccess().getFactAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fact__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getFactAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getColonHyphenMinusKeyword_0()); }
	':-'
	{ after(grammarAccess.getRuleAccess().getColonHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getQueryAssignment_1()); }
	(rule__Rule__QueryAssignment_1)
	{ after(grammarAccess.getRuleAccess().getQueryAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getFullStopKeyword_2()); }
	'.'
	{ after(grammarAccess.getRuleAccess().getFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Predicate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__0__Impl
	rule__Predicate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getFunctorAssignment_0()); }
	(rule__Predicate__FunctorAssignment_0)
	{ after(grammarAccess.getPredicateAccess().getFunctorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__1__Impl
	rule__Predicate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getPredicateAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__2__Impl
	rule__Predicate__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getTermAssignment_2()); }
	(rule__Predicate__TermAssignment_2)
	{ after(grammarAccess.getPredicateAccess().getTermAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__3__Impl
	rule__Predicate__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getEtermsAssignment_3()); }
	(rule__Predicate__EtermsAssignment_3)*
	{ after(grammarAccess.getPredicateAccess().getEtermsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getPredicateAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ETerm__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ETerm__Group__0__Impl
	rule__ETerm__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ETerm__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getETermAccess().getCommaKeyword_0()); }
	','
	{ after(grammarAccess.getETermAccess().getCommaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ETerm__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ETerm__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ETerm__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getETermAccess().getTermAssignment_1()); }
	(rule__ETerm__TermAssignment_1)
	{ after(grammarAccess.getETermAccess().getTermAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EmptyList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EmptyList__Group__0__Impl
	rule__EmptyList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEmptyListAccess().getEmptyListAction_0()); }
	()
	{ after(grammarAccess.getEmptyListAccess().getEmptyListAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EmptyList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEmptyListAccess().getLeftSquareBracketRightSquareBracketKeyword_1()); }
	'[]'
	{ after(grammarAccess.getEmptyListAccess().getLeftSquareBracketRightSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Folge__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Folge__Group__0__Impl
	rule__Folge__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Folge__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFolgeAccess().getAtomAssignment_0()); }
	(rule__Folge__AtomAssignment_0)
	{ after(grammarAccess.getFolgeAccess().getAtomAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Folge__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Folge__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Folge__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFolgeAccess().getEatomsAssignment_1()); }
	(rule__Folge__EatomsAssignment_1)*
	{ after(grammarAccess.getFolgeAccess().getEatomsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EFolge__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFolge__Group__0__Impl
	rule__EFolge__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EFolge__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFolgeAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getEFolgeAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFolge__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFolge__Group__1__Impl
	rule__EFolge__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EFolge__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFolgeAccess().getFolgeAssignment_1()); }
	(rule__EFolge__FolgeAssignment_1)
	{ after(grammarAccess.getEFolgeAccess().getFolgeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFolge__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFolge__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EFolge__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFolgeAccess().getRightSquareBracketKeyword_2()); }
	']'
	{ after(grammarAccess.getEFolgeAccess().getRightSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EList__Group__0__Impl
	rule__EList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEListAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getEListAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EList__Group__1__Impl
	rule__EList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEListAccess().getAtomAssignment_1()); }
	(rule__EList__AtomAssignment_1)
	{ after(grammarAccess.getEListAccess().getAtomAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EList__Group__2__Impl
	rule__EList__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEListAccess().getVerticalLineKeyword_2()); }
	'|'
	{ after(grammarAccess.getEListAccess().getVerticalLineKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EList__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EList__Group__3__Impl
	rule__EList__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EList__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEListAccess().getTermAssignment_3()); }
	(rule__EList__TermAssignment_3)
	{ after(grammarAccess.getEListAccess().getTermAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EList__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EList__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EList__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEListAccess().getRightSquareBracketKeyword_4()); }
	']'
	{ after(grammarAccess.getEListAccess().getRightSquareBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EAtom__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EAtom__Group__0__Impl
	rule__EAtom__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EAtom__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEAtomAccess().getCommaKeyword_0()); }
	','
	{ after(grammarAccess.getEAtomAccess().getCommaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EAtom__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EAtom__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EAtom__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEAtomAccess().getAtomAssignment_1()); }
	(rule__EAtom__AtomAssignment_1)
	{ after(grammarAccess.getEAtomAccess().getAtomAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrologDsl__ProgramAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrologDslAccess().getProgramProgramParserRuleCall_0_0()); }
		ruleProgram
		{ after(grammarAccess.getPrologDslAccess().getProgramProgramParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrologDsl__ExQueryAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrologDslAccess().getExQueryExqueryParserRuleCall_1_0()); }
		ruleExquery
		{ after(grammarAccess.getPrologDslAccess().getExQueryExqueryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__ClausesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getClausesClauseParserRuleCall_0()); }
		ruleClause
		{ after(grammarAccess.getProgramAccess().getClausesClauseParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exquery__QueryAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExqueryAccess().getQueryQueryParserRuleCall_1_0()); }
		ruleQuery
		{ after(grammarAccess.getExqueryAccess().getQueryQueryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__PredicateAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQueryAccess().getPredicatePredicateParserRuleCall_0_0()); }
		rulePredicate
		{ after(grammarAccess.getQueryAccess().getPredicatePredicateParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__EpredicatesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQueryAccess().getEpredicatesEPredicateParserRuleCall_1_0()); }
		ruleEPredicate
		{ after(grammarAccess.getQueryAccess().getEpredicatesEPredicateParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EPredicate__PredicateAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEPredicateAccess().getPredicatePredicateParserRuleCall_1_0()); }
		rulePredicate
		{ after(grammarAccess.getEPredicateAccess().getPredicatePredicateParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__PredicateAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getPredicatePredicateParserRuleCall_0_0()); }
		rulePredicate
		{ after(grammarAccess.getClauseAccess().getPredicatePredicateParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__FactAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getFactFactParserRuleCall_1_0_0()); }
		ruleFact
		{ after(grammarAccess.getClauseAccess().getFactFactParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__RuleAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getRuleRuleParserRuleCall_1_1_0()); }
		ruleRule
		{ after(grammarAccess.getClauseAccess().getRuleRuleParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__QueryAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getQueryQueryParserRuleCall_1_0()); }
		ruleQuery
		{ after(grammarAccess.getRuleAccess().getQueryQueryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__FunctorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateAccess().getFunctorFunctorParserRuleCall_0_0()); }
		ruleFunctor
		{ after(grammarAccess.getPredicateAccess().getFunctorFunctorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__TermAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateAccess().getTermTermParserRuleCall_2_0()); }
		ruleTerm
		{ after(grammarAccess.getPredicateAccess().getTermTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__EtermsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateAccess().getEtermsETermParserRuleCall_3_0()); }
		ruleETerm
		{ after(grammarAccess.getPredicateAccess().getEtermsETermParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Functor__IdentAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctorAccess().getIdentIdentParserRuleCall_0()); }
		ruleIdent
		{ after(grammarAccess.getFunctorAccess().getIdentIdentParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__AtomAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getAtomAtomParserRuleCall_0_0()); }
		ruleAtom
		{ after(grammarAccess.getTermAccess().getAtomAtomParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__ListAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getListListParserRuleCall_1_0()); }
		ruleList
		{ after(grammarAccess.getTermAccess().getListListParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ETerm__TermAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getETermAccess().getTermTermParserRuleCall_1_0()); }
		ruleTerm
		{ after(grammarAccess.getETermAccess().getTermTermParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__IdentAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getIdentIdentParserRuleCall_0_0()); }
		ruleIdent
		{ after(grammarAccess.getAtomAccess().getIdentIdentParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__NumberAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getNumberNUMBERTerminalRuleCall_1_0()); }
		RULE_NUMBER
		{ after(grammarAccess.getAtomAccess().getNumberNUMBERTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__EvarAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getEvarEVarParserRuleCall_2_0()); }
		ruleEVar
		{ after(grammarAccess.getAtomAccess().getEvarEVarParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__EmptyAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getEmptyEmptyListParserRuleCall_0_0()); }
		ruleEmptyList
		{ after(grammarAccess.getListAccess().getEmptyEmptyListParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__NonEmptyListAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getNonEmptyListNonEmptyListParserRuleCall_1_0()); }
		ruleNonEmptyList
		{ after(grammarAccess.getListAccess().getNonEmptyListNonEmptyListParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NonEmptyList__EfolgeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNonEmptyListAccess().getEfolgeEFolgeParserRuleCall_0_0()); }
		ruleEFolge
		{ after(grammarAccess.getNonEmptyListAccess().getEfolgeEFolgeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NonEmptyList__ElistAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNonEmptyListAccess().getElistEListParserRuleCall_1_0()); }
		ruleEList
		{ after(grammarAccess.getNonEmptyListAccess().getElistEListParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Folge__AtomAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFolgeAccess().getAtomAtomParserRuleCall_0_0()); }
		ruleAtom
		{ after(grammarAccess.getFolgeAccess().getAtomAtomParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Folge__EatomsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFolgeAccess().getEatomsEAtomParserRuleCall_1_0()); }
		ruleEAtom
		{ after(grammarAccess.getFolgeAccess().getEatomsEAtomParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFolge__FolgeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEFolgeAccess().getFolgeFolgeParserRuleCall_1_0()); }
		ruleFolge
		{ after(grammarAccess.getEFolgeAccess().getFolgeFolgeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EList__AtomAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEListAccess().getAtomAtomParserRuleCall_1_0()); }
		ruleAtom
		{ after(grammarAccess.getEListAccess().getAtomAtomParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EList__TermAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEListAccess().getTermTermParserRuleCall_3_0()); }
		ruleTerm
		{ after(grammarAccess.getEListAccess().getTermTermParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EAtom__AtomAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEAtomAccess().getAtomAtomParserRuleCall_1_0()); }
		ruleAtom
		{ after(grammarAccess.getEAtomAccess().getAtomAtomParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ident__IdentAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentAccess().getIdentIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getIdentAccess().getIdentIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EVar__VariableAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEVarAccess().getVariableVARIABLETerminalRuleCall_0()); }
		RULE_VARIABLE
		{ after(grammarAccess.getEVarAccess().getVariableVARIABLETerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? 'a'..'z' ('A'..'Z'|'a'..'z'|'0'..'9'|'_')*;

RULE_NUMBER : RULE_INT;

RULE_VARIABLE : 'A'..'Z';

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
