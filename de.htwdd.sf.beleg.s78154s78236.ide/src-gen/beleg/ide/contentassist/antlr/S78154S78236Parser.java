/*
 * generated by Xtext 2.13.0
 */
package beleg.ide.contentassist.antlr;

import beleg.ide.contentassist.antlr.internal.InternalS78154S78236Parser;
import beleg.services.S78154S78236GrammarAccess;
import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class S78154S78236Parser extends AbstractContentAssistParser {

	@Inject
	private S78154S78236GrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalS78154S78236Parser createParser() {
		InternalS78154S78236Parser result = new InternalS78154S78236Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getClauseAccess().getAlternatives_1(), "rule__Clause__Alternatives_1");
					put(grammarAccess.getTermAccess().getAlternatives(), "rule__Term__Alternatives");
					put(grammarAccess.getAtomAccess().getAlternatives(), "rule__Atom__Alternatives");
					put(grammarAccess.getListAccess().getAlternatives(), "rule__List__Alternatives");
					put(grammarAccess.getNonEmptyListAccess().getAlternatives(), "rule__NonEmptyList__Alternatives");
					put(grammarAccess.getPrologDslAccess().getGroup(), "rule__PrologDsl__Group__0");
					put(grammarAccess.getExqueryAccess().getGroup(), "rule__Exquery__Group__0");
					put(grammarAccess.getQueryAccess().getGroup(), "rule__Query__Group__0");
					put(grammarAccess.getEPredicateAccess().getGroup(), "rule__EPredicate__Group__0");
					put(grammarAccess.getClauseAccess().getGroup(), "rule__Clause__Group__0");
					put(grammarAccess.getFactAccess().getGroup(), "rule__Fact__Group__0");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getPredicateAccess().getGroup(), "rule__Predicate__Group__0");
					put(grammarAccess.getETermAccess().getGroup(), "rule__ETerm__Group__0");
					put(grammarAccess.getEmptyListAccess().getGroup(), "rule__EmptyList__Group__0");
					put(grammarAccess.getFolgeAccess().getGroup(), "rule__Folge__Group__0");
					put(grammarAccess.getEFolgeAccess().getGroup(), "rule__EFolge__Group__0");
					put(grammarAccess.getEListAccess().getGroup(), "rule__EList__Group__0");
					put(grammarAccess.getEAtomAccess().getGroup(), "rule__EAtom__Group__0");
					put(grammarAccess.getModelAccess().getModelAssignment(), "rule__Model__ModelAssignment");
					put(grammarAccess.getPrologDslAccess().getProgramAssignment_0(), "rule__PrologDsl__ProgramAssignment_0");
					put(grammarAccess.getPrologDslAccess().getExQueryAssignment_1(), "rule__PrologDsl__ExQueryAssignment_1");
					put(grammarAccess.getProgramAccess().getClausesAssignment(), "rule__Program__ClausesAssignment");
					put(grammarAccess.getExqueryAccess().getQueryAssignment_1(), "rule__Exquery__QueryAssignment_1");
					put(grammarAccess.getQueryAccess().getPredicateAssignment_0(), "rule__Query__PredicateAssignment_0");
					put(grammarAccess.getQueryAccess().getEpredicatesAssignment_1(), "rule__Query__EpredicatesAssignment_1");
					put(grammarAccess.getEPredicateAccess().getPredicateAssignment_1(), "rule__EPredicate__PredicateAssignment_1");
					put(grammarAccess.getClauseAccess().getPredicateAssignment_0(), "rule__Clause__PredicateAssignment_0");
					put(grammarAccess.getClauseAccess().getFactAssignment_1_0(), "rule__Clause__FactAssignment_1_0");
					put(grammarAccess.getClauseAccess().getRuleAssignment_1_1(), "rule__Clause__RuleAssignment_1_1");
					put(grammarAccess.getRuleAccess().getQueryAssignment_1(), "rule__Rule__QueryAssignment_1");
					put(grammarAccess.getPredicateAccess().getFunctorAssignment_0(), "rule__Predicate__FunctorAssignment_0");
					put(grammarAccess.getPredicateAccess().getTermAssignment_2(), "rule__Predicate__TermAssignment_2");
					put(grammarAccess.getPredicateAccess().getEtermsAssignment_3(), "rule__Predicate__EtermsAssignment_3");
					put(grammarAccess.getFunctorAccess().getIdentAssignment(), "rule__Functor__IdentAssignment");
					put(grammarAccess.getTermAccess().getAtomAssignment_0(), "rule__Term__AtomAssignment_0");
					put(grammarAccess.getTermAccess().getListAssignment_1(), "rule__Term__ListAssignment_1");
					put(grammarAccess.getETermAccess().getTermAssignment_1(), "rule__ETerm__TermAssignment_1");
					put(grammarAccess.getAtomAccess().getIdentAssignment_0(), "rule__Atom__IdentAssignment_0");
					put(grammarAccess.getAtomAccess().getNumberAssignment_1(), "rule__Atom__NumberAssignment_1");
					put(grammarAccess.getAtomAccess().getEvarAssignment_2(), "rule__Atom__EvarAssignment_2");
					put(grammarAccess.getListAccess().getEmptyAssignment_0(), "rule__List__EmptyAssignment_0");
					put(grammarAccess.getListAccess().getNonEmptyListAssignment_1(), "rule__List__NonEmptyListAssignment_1");
					put(grammarAccess.getNonEmptyListAccess().getEfolgeAssignment_0(), "rule__NonEmptyList__EfolgeAssignment_0");
					put(grammarAccess.getNonEmptyListAccess().getElistAssignment_1(), "rule__NonEmptyList__ElistAssignment_1");
					put(grammarAccess.getFolgeAccess().getAtomAssignment_0(), "rule__Folge__AtomAssignment_0");
					put(grammarAccess.getFolgeAccess().getEatomsAssignment_1(), "rule__Folge__EatomsAssignment_1");
					put(grammarAccess.getEFolgeAccess().getFolgeAssignment_1(), "rule__EFolge__FolgeAssignment_1");
					put(grammarAccess.getEListAccess().getAtomAssignment_1(), "rule__EList__AtomAssignment_1");
					put(grammarAccess.getEListAccess().getTermAssignment_3(), "rule__EList__TermAssignment_3");
					put(grammarAccess.getEAtomAccess().getAtomAssignment_1(), "rule__EAtom__AtomAssignment_1");
					put(grammarAccess.getIdentAccess().getIdentAssignment(), "rule__Ident__IdentAssignment");
					put(grammarAccess.getEVarAccess().getVariableAssignment(), "rule__EVar__VariableAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public S78154S78236GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(S78154S78236GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
