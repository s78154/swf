/**
 * generated by Xtext 2.13.0
 */
package beleg.s78154S78236.impl;

import beleg.s78154S78236.EmptyList;
import beleg.s78154S78236.List;
import beleg.s78154S78236.NonEmptyList;
import beleg.s78154S78236.S78154S78236Package;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>List</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link beleg.s78154S78236.impl.ListImpl#getEmpty <em>Empty</em>}</li>
 *   <li>{@link beleg.s78154S78236.impl.ListImpl#getNonEmptyList <em>Non Empty List</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class ListImpl extends MinimalEObjectImpl.Container implements List
{
  /**
   * The cached value of the '{@link #getEmpty() <em>Empty</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEmpty()
   * @generated
   * @ordered
   */
  protected EmptyList empty;

  /**
   * The cached value of the '{@link #getNonEmptyList() <em>Non Empty List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNonEmptyList()
   * @generated
   * @ordered
   */
  protected NonEmptyList nonEmptyList;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ListImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return S78154S78236Package.Literals.LIST;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EmptyList getEmpty()
  {
    return empty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEmpty(EmptyList newEmpty, NotificationChain msgs)
  {
    EmptyList oldEmpty = empty;
    empty = newEmpty;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, S78154S78236Package.LIST__EMPTY, oldEmpty, newEmpty);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEmpty(EmptyList newEmpty)
  {
    if (newEmpty != empty)
    {
      NotificationChain msgs = null;
      if (empty != null)
        msgs = ((InternalEObject)empty).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - S78154S78236Package.LIST__EMPTY, null, msgs);
      if (newEmpty != null)
        msgs = ((InternalEObject)newEmpty).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - S78154S78236Package.LIST__EMPTY, null, msgs);
      msgs = basicSetEmpty(newEmpty, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, S78154S78236Package.LIST__EMPTY, newEmpty, newEmpty));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NonEmptyList getNonEmptyList()
  {
    return nonEmptyList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNonEmptyList(NonEmptyList newNonEmptyList, NotificationChain msgs)
  {
    NonEmptyList oldNonEmptyList = nonEmptyList;
    nonEmptyList = newNonEmptyList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, S78154S78236Package.LIST__NON_EMPTY_LIST, oldNonEmptyList, newNonEmptyList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNonEmptyList(NonEmptyList newNonEmptyList)
  {
    if (newNonEmptyList != nonEmptyList)
    {
      NotificationChain msgs = null;
      if (nonEmptyList != null)
        msgs = ((InternalEObject)nonEmptyList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - S78154S78236Package.LIST__NON_EMPTY_LIST, null, msgs);
      if (newNonEmptyList != null)
        msgs = ((InternalEObject)newNonEmptyList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - S78154S78236Package.LIST__NON_EMPTY_LIST, null, msgs);
      msgs = basicSetNonEmptyList(newNonEmptyList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, S78154S78236Package.LIST__NON_EMPTY_LIST, newNonEmptyList, newNonEmptyList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case S78154S78236Package.LIST__EMPTY:
        return basicSetEmpty(null, msgs);
      case S78154S78236Package.LIST__NON_EMPTY_LIST:
        return basicSetNonEmptyList(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case S78154S78236Package.LIST__EMPTY:
        return getEmpty();
      case S78154S78236Package.LIST__NON_EMPTY_LIST:
        return getNonEmptyList();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case S78154S78236Package.LIST__EMPTY:
        setEmpty((EmptyList)newValue);
        return;
      case S78154S78236Package.LIST__NON_EMPTY_LIST:
        setNonEmptyList((NonEmptyList)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case S78154S78236Package.LIST__EMPTY:
        setEmpty((EmptyList)null);
        return;
      case S78154S78236Package.LIST__NON_EMPTY_LIST:
        setNonEmptyList((NonEmptyList)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case S78154S78236Package.LIST__EMPTY:
        return empty != null;
      case S78154S78236Package.LIST__NON_EMPTY_LIST:
        return nonEmptyList != null;
    }
    return super.eIsSet(featureID);
  }

} //ListImpl
