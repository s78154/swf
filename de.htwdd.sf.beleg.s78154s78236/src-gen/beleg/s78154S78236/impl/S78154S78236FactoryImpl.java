/**
 * generated by Xtext 2.13.0
 */
package beleg.s78154S78236.impl;

import beleg.s78154S78236.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class S78154S78236FactoryImpl extends EFactoryImpl implements S78154S78236Factory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static S78154S78236Factory init()
  {
    try
    {
      S78154S78236Factory theS78154S78236Factory = (S78154S78236Factory)EPackage.Registry.INSTANCE.getEFactory(S78154S78236Package.eNS_URI);
      if (theS78154S78236Factory != null)
      {
        return theS78154S78236Factory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new S78154S78236FactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public S78154S78236FactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case S78154S78236Package.MODEL: return createModel();
      case S78154S78236Package.PROLOG_DSL: return createPrologDsl();
      case S78154S78236Package.PROGRAM: return createProgram();
      case S78154S78236Package.EXQUERY: return createExquery();
      case S78154S78236Package.QUERY: return createQuery();
      case S78154S78236Package.EPREDICATE: return createEPredicate();
      case S78154S78236Package.CLAUSE: return createClause();
      case S78154S78236Package.RULE: return createRule();
      case S78154S78236Package.PREDICATE: return createPredicate();
      case S78154S78236Package.FUNCTOR: return createFunctor();
      case S78154S78236Package.TERM: return createTerm();
      case S78154S78236Package.ETERM: return createETerm();
      case S78154S78236Package.ATOM: return createAtom();
      case S78154S78236Package.LIST: return createList();
      case S78154S78236Package.EMPTY_LIST: return createEmptyList();
      case S78154S78236Package.NON_EMPTY_LIST: return createNonEmptyList();
      case S78154S78236Package.FOLGE: return createFolge();
      case S78154S78236Package.EFOLGE: return createEFolge();
      case S78154S78236Package.ELIST: return createEList();
      case S78154S78236Package.EATOM: return createEAtom();
      case S78154S78236Package.IDENT: return createIdent();
      case S78154S78236Package.EVAR: return createEVar();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrologDsl createPrologDsl()
  {
    PrologDslImpl prologDsl = new PrologDslImpl();
    return prologDsl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Exquery createExquery()
  {
    ExqueryImpl exquery = new ExqueryImpl();
    return exquery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Query createQuery()
  {
    QueryImpl query = new QueryImpl();
    return query;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EPredicate createEPredicate()
  {
    EPredicateImpl ePredicate = new EPredicateImpl();
    return ePredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Clause createClause()
  {
    ClauseImpl clause = new ClauseImpl();
    return clause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Rule createRule()
  {
    RuleImpl rule = new RuleImpl();
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Predicate createPredicate()
  {
    PredicateImpl predicate = new PredicateImpl();
    return predicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Functor createFunctor()
  {
    FunctorImpl functor = new FunctorImpl();
    return functor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Term createTerm()
  {
    TermImpl term = new TermImpl();
    return term;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ETerm createETerm()
  {
    ETermImpl eTerm = new ETermImpl();
    return eTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Atom createAtom()
  {
    AtomImpl atom = new AtomImpl();
    return atom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public List createList()
  {
    ListImpl list = new ListImpl();
    return list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EmptyList createEmptyList()
  {
    EmptyListImpl emptyList = new EmptyListImpl();
    return emptyList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NonEmptyList createNonEmptyList()
  {
    NonEmptyListImpl nonEmptyList = new NonEmptyListImpl();
    return nonEmptyList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Folge createFolge()
  {
    FolgeImpl folge = new FolgeImpl();
    return folge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EFolge createEFolge()
  {
    EFolgeImpl eFolge = new EFolgeImpl();
    return eFolge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList createEList()
  {
    EListImpl eList = new EListImpl();
    return eList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAtom createEAtom()
  {
    EAtomImpl eAtom = new EAtomImpl();
    return eAtom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Ident createIdent()
  {
    IdentImpl ident = new IdentImpl();
    return ident;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EVar createEVar()
  {
    EVarImpl eVar = new EVarImpl();
    return eVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public S78154S78236Package getS78154S78236Package()
  {
    return (S78154S78236Package)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static S78154S78236Package getPackage()
  {
    return S78154S78236Package.eINSTANCE;
  }

} //S78154S78236FactoryImpl
