/*
 * generated by Xtext 2.13.0
 */
package beleg.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class S78154S78236GrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.Model");
		private final Assignment cDslAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDslPrologDslParserRuleCall_0 = (RuleCall)cDslAssignment.eContents().get(0);
		
		//Model:
		//	dsl+=PrologDsl;
		@Override public ParserRule getRule() { return rule; }
		
		//dsl+=PrologDsl
		public Assignment getDslAssignment() { return cDslAssignment; }
		
		//PrologDsl
		public RuleCall getDslPrologDslParserRuleCall_0() { return cDslPrologDslParserRuleCall_0; }
	}
	public class PrologDslElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.PrologDsl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProgramAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProgramProgramParserRuleCall_0_0 = (RuleCall)cProgramAssignment_0.eContents().get(0);
		private final Assignment cExQueryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExQueryExqueryParserRuleCall_1_0 = (RuleCall)cExQueryAssignment_1.eContents().get(0);
		
		//PrologDsl:
		//	program=Program exQuery=Exquery;
		@Override public ParserRule getRule() { return rule; }
		
		//program=Program exQuery=Exquery
		public Group getGroup() { return cGroup; }
		
		//program=Program
		public Assignment getProgramAssignment_0() { return cProgramAssignment_0; }
		
		//Program
		public RuleCall getProgramProgramParserRuleCall_0_0() { return cProgramProgramParserRuleCall_0_0; }
		
		//exQuery=Exquery
		public Assignment getExQueryAssignment_1() { return cExQueryAssignment_1; }
		
		//Exquery
		public RuleCall getExQueryExqueryParserRuleCall_1_0() { return cExQueryExqueryParserRuleCall_1_0; }
	}
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.Program");
		private final Assignment cClausesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cClausesClauseParserRuleCall_0 = (RuleCall)cClausesAssignment.eContents().get(0);
		
		//Program:
		//	clauses+=Clause+;
		@Override public ParserRule getRule() { return rule; }
		
		//clauses+=Clause+
		public Assignment getClausesAssignment() { return cClausesAssignment; }
		
		//Clause
		public RuleCall getClausesClauseParserRuleCall_0() { return cClausesClauseParserRuleCall_0; }
	}
	public class ExqueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.Exquery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQueryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQueryQueryParserRuleCall_1_0 = (RuleCall)cQueryAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Exquery:
		//	"?-" query=Query ".";
		@Override public ParserRule getRule() { return rule; }
		
		//"?-" query=Query "."
		public Group getGroup() { return cGroup; }
		
		//"?-"
		public Keyword getQuestionMarkHyphenMinusKeyword_0() { return cQuestionMarkHyphenMinusKeyword_0; }
		
		//query=Query
		public Assignment getQueryAssignment_1() { return cQueryAssignment_1; }
		
		//Query
		public RuleCall getQueryQueryParserRuleCall_1_0() { return cQueryQueryParserRuleCall_1_0; }
		
		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}
	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredicateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPredicatePredicateParserRuleCall_0_0 = (RuleCall)cPredicateAssignment_0.eContents().get(0);
		private final Assignment cEpredicatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEpredicatesEPredicateParserRuleCall_1_0 = (RuleCall)cEpredicatesAssignment_1.eContents().get(0);
		
		//Query:
		//	predicate=Predicate epredicates+=EPredicate*;
		@Override public ParserRule getRule() { return rule; }
		
		//predicate=Predicate epredicates+=EPredicate*
		public Group getGroup() { return cGroup; }
		
		//predicate=Predicate
		public Assignment getPredicateAssignment_0() { return cPredicateAssignment_0; }
		
		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_0_0() { return cPredicatePredicateParserRuleCall_0_0; }
		
		//epredicates+=EPredicate*
		public Assignment getEpredicatesAssignment_1() { return cEpredicatesAssignment_1; }
		
		//EPredicate
		public RuleCall getEpredicatesEPredicateParserRuleCall_1_0() { return cEpredicatesEPredicateParserRuleCall_1_0; }
	}
	public class EPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.EPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPredicateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredicatePredicateParserRuleCall_1_0 = (RuleCall)cPredicateAssignment_1.eContents().get(0);
		
		//EPredicate:
		//	"," predicate=Predicate;
		@Override public ParserRule getRule() { return rule; }
		
		//"," predicate=Predicate
		public Group getGroup() { return cGroup; }
		
		//","
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//predicate=Predicate
		public Assignment getPredicateAssignment_1() { return cPredicateAssignment_1; }
		
		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_1_0() { return cPredicatePredicateParserRuleCall_1_0; }
	}
	public class ClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.Clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredicateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPredicatePredicateParserRuleCall_0_0 = (RuleCall)cPredicateAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cFactAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cFactFactParserRuleCall_1_0_0 = (RuleCall)cFactAssignment_1_0.eContents().get(0);
		private final Assignment cRuleAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cRuleRuleParserRuleCall_1_1_0 = (RuleCall)cRuleAssignment_1_1.eContents().get(0);
		
		//Clause:
		//	predicate=Predicate (fact=Fact | rule=Rule);
		@Override public ParserRule getRule() { return rule; }
		
		//predicate=Predicate (fact=Fact | rule=Rule)
		public Group getGroup() { return cGroup; }
		
		//predicate=Predicate
		public Assignment getPredicateAssignment_0() { return cPredicateAssignment_0; }
		
		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_0_0() { return cPredicatePredicateParserRuleCall_0_0; }
		
		//fact=Fact | rule=Rule
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//fact=Fact
		public Assignment getFactAssignment_1_0() { return cFactAssignment_1_0; }
		
		//Fact
		public RuleCall getFactFactParserRuleCall_1_0_0() { return cFactFactParserRuleCall_1_0_0; }
		
		//rule=Rule
		public Assignment getRuleAssignment_1_1() { return cRuleAssignment_1_1; }
		
		//Rule
		public RuleCall getRuleRuleParserRuleCall_1_1_0() { return cRuleRuleParserRuleCall_1_1_0; }
	}
	public class FactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.Fact");
		private final Keyword cFullStopKeyword = (Keyword)rule.eContents().get(1);
		
		//Fact:
		//	".";
		@Override public ParserRule getRule() { return rule; }
		
		//"."
		public Keyword getFullStopKeyword() { return cFullStopKeyword; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTermAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTermTermParserRuleCall_2_0 = (RuleCall)cTermAssignment_2.eContents().get(0);
		private final Assignment cEtermsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEtermsETermParserRuleCall_3_0 = (RuleCall)cEtermsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Rule:
		//	":-" "(" term=Term eterms+=ETerm* ")";
		@Override public ParserRule getRule() { return rule; }
		
		//":-" "(" term=Term eterms+=ETerm* ")"
		public Group getGroup() { return cGroup; }
		
		//":-"
		public Keyword getColonHyphenMinusKeyword_0() { return cColonHyphenMinusKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//term=Term
		public Assignment getTermAssignment_2() { return cTermAssignment_2; }
		
		//Term
		public RuleCall getTermTermParserRuleCall_2_0() { return cTermTermParserRuleCall_2_0; }
		
		//eterms+=ETerm*
		public Assignment getEtermsAssignment_3() { return cEtermsAssignment_3; }
		
		//ETerm
		public RuleCall getEtermsETermParserRuleCall_3_0() { return cEtermsETermParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.Predicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctorFunctorParserRuleCall_0_0 = (RuleCall)cFunctorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTermAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTermTermParserRuleCall_2_0 = (RuleCall)cTermAssignment_2.eContents().get(0);
		private final Assignment cEtermsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEtermsETermParserRuleCall_3_0 = (RuleCall)cEtermsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Predicate:
		//	functor=Functor "(" term=Term eterms+=ETerm* ")";
		@Override public ParserRule getRule() { return rule; }
		
		//functor=Functor "(" term=Term eterms+=ETerm* ")"
		public Group getGroup() { return cGroup; }
		
		//functor=Functor
		public Assignment getFunctorAssignment_0() { return cFunctorAssignment_0; }
		
		//Functor
		public RuleCall getFunctorFunctorParserRuleCall_0_0() { return cFunctorFunctorParserRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//term=Term
		public Assignment getTermAssignment_2() { return cTermAssignment_2; }
		
		//Term
		public RuleCall getTermTermParserRuleCall_2_0() { return cTermTermParserRuleCall_2_0; }
		
		//eterms+=ETerm*
		public Assignment getEtermsAssignment_3() { return cEtermsAssignment_3; }
		
		//ETerm
		public RuleCall getEtermsETermParserRuleCall_3_0() { return cEtermsETermParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class FunctorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.Functor");
		private final Assignment cIdentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentIdentParserRuleCall_0 = (RuleCall)cIdentAssignment.eContents().get(0);
		
		//Functor:
		//	ident=Ident;
		@Override public ParserRule getRule() { return rule; }
		
		//ident=Ident
		public Assignment getIdentAssignment() { return cIdentAssignment; }
		
		//Ident
		public RuleCall getIdentIdentParserRuleCall_0() { return cIdentIdentParserRuleCall_0; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAtomAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cAtomAtomParserRuleCall_0_0 = (RuleCall)cAtomAssignment_0.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cListListParserRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		
		//Term:
		//	atom=Atom | list=List;
		@Override public ParserRule getRule() { return rule; }
		
		//atom=Atom | list=List
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//atom=Atom
		public Assignment getAtomAssignment_0() { return cAtomAssignment_0; }
		
		//Atom
		public RuleCall getAtomAtomParserRuleCall_0_0() { return cAtomAtomParserRuleCall_0_0; }
		
		//list=List
		public Assignment getListAssignment_1() { return cListAssignment_1; }
		
		//List
		public RuleCall getListListParserRuleCall_1_0() { return cListListParserRuleCall_1_0; }
	}
	public class ETermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.ETerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTermAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTermTermParserRuleCall_1_0 = (RuleCall)cTermAssignment_1.eContents().get(0);
		
		//ETerm:
		//	"," term=Term;
		@Override public ParserRule getRule() { return rule; }
		
		//"," term=Term
		public Group getGroup() { return cGroup; }
		
		//","
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//term=Term
		public Assignment getTermAssignment_1() { return cTermAssignment_1; }
		
		//Term
		public RuleCall getTermTermParserRuleCall_1_0() { return cTermTermParserRuleCall_1_0; }
	}
	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.Atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdentAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIdentIdentParserRuleCall_0_0 = (RuleCall)cIdentAssignment_0.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumberNUMBER1TerminalRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		private final Assignment cEvarAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cEvarEVarParserRuleCall_2_0 = (RuleCall)cEvarAssignment_2.eContents().get(0);
		
		//Atom:
		//	ident=Ident | number=NUMBER1 | evar=EVar;
		@Override public ParserRule getRule() { return rule; }
		
		//ident=Ident | number=NUMBER1 | evar=EVar
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ident=Ident
		public Assignment getIdentAssignment_0() { return cIdentAssignment_0; }
		
		//Ident
		public RuleCall getIdentIdentParserRuleCall_0_0() { return cIdentIdentParserRuleCall_0_0; }
		
		//number=NUMBER1
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//NUMBER1
		public RuleCall getNumberNUMBER1TerminalRuleCall_1_0() { return cNumberNUMBER1TerminalRuleCall_1_0; }
		
		//evar=EVar
		public Assignment getEvarAssignment_2() { return cEvarAssignment_2; }
		
		//EVar
		public RuleCall getEvarEVarParserRuleCall_2_0() { return cEvarEVarParserRuleCall_2_0; }
	}
	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.List");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEmptyAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEmptyEmptyListParserRuleCall_0_0 = (RuleCall)cEmptyAssignment_0.eContents().get(0);
		private final Assignment cNonEmptyListAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNonEmptyListNonEmptyListParserRuleCall_1_0 = (RuleCall)cNonEmptyListAssignment_1.eContents().get(0);
		
		//List:
		//	empty=EmptyList | nonEmptyList=NonEmptyList;
		@Override public ParserRule getRule() { return rule; }
		
		//empty=EmptyList | nonEmptyList=NonEmptyList
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//empty=EmptyList
		public Assignment getEmptyAssignment_0() { return cEmptyAssignment_0; }
		
		//EmptyList
		public RuleCall getEmptyEmptyListParserRuleCall_0_0() { return cEmptyEmptyListParserRuleCall_0_0; }
		
		//nonEmptyList=NonEmptyList
		public Assignment getNonEmptyListAssignment_1() { return cNonEmptyListAssignment_1; }
		
		//NonEmptyList
		public RuleCall getNonEmptyListNonEmptyListParserRuleCall_1_0() { return cNonEmptyListNonEmptyListParserRuleCall_1_0; }
	}
	public class EmptyListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.EmptyList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEmptyListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EmptyList:
		//	{EmptyList} '[]';
		@Override public ParserRule getRule() { return rule; }
		
		//{EmptyList} '[]'
		public Group getGroup() { return cGroup; }
		
		//{EmptyList}
		public Action getEmptyListAction_0() { return cEmptyListAction_0; }
		
		//'[]'
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1() { return cLeftSquareBracketRightSquareBracketKeyword_1; }
	}
	public class NonEmptyListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.NonEmptyList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEfolgeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEfolgeEFolgeParserRuleCall_0_0 = (RuleCall)cEfolgeAssignment_0.eContents().get(0);
		private final Assignment cElistAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cElistEListParserRuleCall_1_0 = (RuleCall)cElistAssignment_1.eContents().get(0);
		
		//NonEmptyList:
		//	efolge=EFolge | elist=EList;
		@Override public ParserRule getRule() { return rule; }
		
		//efolge=EFolge | elist=EList
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//efolge=EFolge
		public Assignment getEfolgeAssignment_0() { return cEfolgeAssignment_0; }
		
		//EFolge
		public RuleCall getEfolgeEFolgeParserRuleCall_0_0() { return cEfolgeEFolgeParserRuleCall_0_0; }
		
		//elist=EList
		public Assignment getElistAssignment_1() { return cElistAssignment_1; }
		
		//EList
		public RuleCall getElistEListParserRuleCall_1_0() { return cElistEListParserRuleCall_1_0; }
	}
	public class FolgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.Folge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAtomAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAtomAtomParserRuleCall_0_0 = (RuleCall)cAtomAssignment_0.eContents().get(0);
		private final Assignment cEatomsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEatomsEAtomParserRuleCall_1_0 = (RuleCall)cEatomsAssignment_1.eContents().get(0);
		
		//Folge:
		//	atom=Atom eatoms+=EAtom*;
		@Override public ParserRule getRule() { return rule; }
		
		//atom=Atom eatoms+=EAtom*
		public Group getGroup() { return cGroup; }
		
		//atom=Atom
		public Assignment getAtomAssignment_0() { return cAtomAssignment_0; }
		
		//Atom
		public RuleCall getAtomAtomParserRuleCall_0_0() { return cAtomAtomParserRuleCall_0_0; }
		
		//eatoms+=EAtom*
		public Assignment getEatomsAssignment_1() { return cEatomsAssignment_1; }
		
		//EAtom
		public RuleCall getEatomsEAtomParserRuleCall_1_0() { return cEatomsEAtomParserRuleCall_1_0; }
	}
	public class EFolgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.EFolge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFolgeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFolgeFolgeParserRuleCall_1_0 = (RuleCall)cFolgeAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//EFolge:
		//	'[' folge=Folge ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' folge=Folge ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//folge=Folge
		public Assignment getFolgeAssignment_1() { return cFolgeAssignment_1; }
		
		//Folge
		public RuleCall getFolgeFolgeParserRuleCall_1_0() { return cFolgeFolgeParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class EListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.EList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAtomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAtomAtomParserRuleCall_1_0 = (RuleCall)cAtomAssignment_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTermAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTermTermParserRuleCall_3_0 = (RuleCall)cTermAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EList:
		//	'[' atom=Atom "|" term=Term ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' atom=Atom "|" term=Term ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//atom=Atom
		public Assignment getAtomAssignment_1() { return cAtomAssignment_1; }
		
		//Atom
		public RuleCall getAtomAtomParserRuleCall_1_0() { return cAtomAtomParserRuleCall_1_0; }
		
		//"|"
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }
		
		//term=Term
		public Assignment getTermAssignment_3() { return cTermAssignment_3; }
		
		//Term
		public RuleCall getTermTermParserRuleCall_3_0() { return cTermTermParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class EAtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.EAtom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAtomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAtomAtomParserRuleCall_1_0 = (RuleCall)cAtomAssignment_1.eContents().get(0);
		
		//EAtom:
		//	"," atom=Atom;
		@Override public ParserRule getRule() { return rule; }
		
		//"," atom=Atom
		public Group getGroup() { return cGroup; }
		
		//","
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//atom=Atom
		public Assignment getAtomAssignment_1() { return cAtomAssignment_1; }
		
		//Atom
		public RuleCall getAtomAtomParserRuleCall_1_0() { return cAtomAtomParserRuleCall_1_0; }
	}
	public class IdentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.Ident");
		private final Assignment cIdentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentIDTerminalRuleCall_0 = (RuleCall)cIdentAssignment.eContents().get(0);
		
		//Ident:
		//	ident=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ident=ID
		public Assignment getIdentAssignment() { return cIdentAssignment; }
		
		//ID
		public RuleCall getIdentIDTerminalRuleCall_0() { return cIdentIDTerminalRuleCall_0; }
	}
	public class EVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.EVar");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVariableVARIABLETerminalRuleCall_0 = (RuleCall)cVariableAssignment.eContents().get(0);
		
		//EVar:
		//	variable=VARIABLE;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=VARIABLE
		public Assignment getVariableAssignment() { return cVariableAssignment; }
		
		//VARIABLE
		public RuleCall getVariableVARIABLETerminalRuleCall_0() { return cVariableVARIABLETerminalRuleCall_0; }
	}
	
	
	private final ModelElements pModel;
	private final PrologDslElements pPrologDsl;
	private final ProgramElements pProgram;
	private final ExqueryElements pExquery;
	private final QueryElements pQuery;
	private final EPredicateElements pEPredicate;
	private final ClauseElements pClause;
	private final FactElements pFact;
	private final RuleElements pRule;
	private final PredicateElements pPredicate;
	private final FunctorElements pFunctor;
	private final TermElements pTerm;
	private final ETermElements pETerm;
	private final AtomElements pAtom;
	private final ListElements pList;
	private final EmptyListElements pEmptyList;
	private final NonEmptyListElements pNonEmptyList;
	private final FolgeElements pFolge;
	private final EFolgeElements pEFolge;
	private final EListElements pEList;
	private final EAtomElements pEAtom;
	private final IdentElements pIdent;
	private final EVarElements pEVar;
	private final TerminalRule tID;
	private final TerminalRule tNUMBER1;
	private final TerminalRule tVARIABLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public S78154S78236GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPrologDsl = new PrologDslElements();
		this.pProgram = new ProgramElements();
		this.pExquery = new ExqueryElements();
		this.pQuery = new QueryElements();
		this.pEPredicate = new EPredicateElements();
		this.pClause = new ClauseElements();
		this.pFact = new FactElements();
		this.pRule = new RuleElements();
		this.pPredicate = new PredicateElements();
		this.pFunctor = new FunctorElements();
		this.pTerm = new TermElements();
		this.pETerm = new ETermElements();
		this.pAtom = new AtomElements();
		this.pList = new ListElements();
		this.pEmptyList = new EmptyListElements();
		this.pNonEmptyList = new NonEmptyListElements();
		this.pFolge = new FolgeElements();
		this.pEFolge = new EFolgeElements();
		this.pEList = new EListElements();
		this.pEAtom = new EAtomElements();
		this.pIdent = new IdentElements();
		this.pEVar = new EVarElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.ID");
		this.tNUMBER1 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.NUMBER1");
		this.tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "beleg.S78154S78236.VARIABLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("beleg.S78154S78236".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	dsl+=PrologDsl;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//PrologDsl:
	//	program=Program exQuery=Exquery;
	public PrologDslElements getPrologDslAccess() {
		return pPrologDsl;
	}
	
	public ParserRule getPrologDslRule() {
		return getPrologDslAccess().getRule();
	}
	
	//Program:
	//	clauses+=Clause+;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Exquery:
	//	"?-" query=Query ".";
	public ExqueryElements getExqueryAccess() {
		return pExquery;
	}
	
	public ParserRule getExqueryRule() {
		return getExqueryAccess().getRule();
	}
	
	//Query:
	//	predicate=Predicate epredicates+=EPredicate*;
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}
	
	//EPredicate:
	//	"," predicate=Predicate;
	public EPredicateElements getEPredicateAccess() {
		return pEPredicate;
	}
	
	public ParserRule getEPredicateRule() {
		return getEPredicateAccess().getRule();
	}
	
	//Clause:
	//	predicate=Predicate (fact=Fact | rule=Rule);
	public ClauseElements getClauseAccess() {
		return pClause;
	}
	
	public ParserRule getClauseRule() {
		return getClauseAccess().getRule();
	}
	
	//Fact:
	//	".";
	public FactElements getFactAccess() {
		return pFact;
	}
	
	public ParserRule getFactRule() {
		return getFactAccess().getRule();
	}
	
	//Rule:
	//	":-" "(" term=Term eterms+=ETerm* ")";
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Predicate:
	//	functor=Functor "(" term=Term eterms+=ETerm* ")";
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}
	
	//Functor:
	//	ident=Ident;
	public FunctorElements getFunctorAccess() {
		return pFunctor;
	}
	
	public ParserRule getFunctorRule() {
		return getFunctorAccess().getRule();
	}
	
	//Term:
	//	atom=Atom | list=List;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//ETerm:
	//	"," term=Term;
	public ETermElements getETermAccess() {
		return pETerm;
	}
	
	public ParserRule getETermRule() {
		return getETermAccess().getRule();
	}
	
	//Atom:
	//	ident=Ident | number=NUMBER1 | evar=EVar;
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}
	
	//List:
	//	empty=EmptyList | nonEmptyList=NonEmptyList;
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}
	
	//EmptyList:
	//	{EmptyList} '[]';
	public EmptyListElements getEmptyListAccess() {
		return pEmptyList;
	}
	
	public ParserRule getEmptyListRule() {
		return getEmptyListAccess().getRule();
	}
	
	//NonEmptyList:
	//	efolge=EFolge | elist=EList;
	public NonEmptyListElements getNonEmptyListAccess() {
		return pNonEmptyList;
	}
	
	public ParserRule getNonEmptyListRule() {
		return getNonEmptyListAccess().getRule();
	}
	
	//Folge:
	//	atom=Atom eatoms+=EAtom*;
	public FolgeElements getFolgeAccess() {
		return pFolge;
	}
	
	public ParserRule getFolgeRule() {
		return getFolgeAccess().getRule();
	}
	
	//EFolge:
	//	'[' folge=Folge ']';
	public EFolgeElements getEFolgeAccess() {
		return pEFolge;
	}
	
	public ParserRule getEFolgeRule() {
		return getEFolgeAccess().getRule();
	}
	
	//EList:
	//	'[' atom=Atom "|" term=Term ']';
	public EListElements getEListAccess() {
		return pEList;
	}
	
	public ParserRule getEListRule() {
		return getEListAccess().getRule();
	}
	
	//EAtom:
	//	"," atom=Atom;
	public EAtomElements getEAtomAccess() {
		return pEAtom;
	}
	
	public ParserRule getEAtomRule() {
		return getEAtomAccess().getRule();
	}
	
	//Ident:
	//	ident=ID;
	public IdentElements getIdentAccess() {
		return pIdent;
	}
	
	public ParserRule getIdentRule() {
		return getIdentAccess().getRule();
	}
	
	//EVar:
	//	variable=VARIABLE;
	public EVarElements getEVarAccess() {
		return pEVar;
	}
	
	public ParserRule getEVarRule() {
		return getEVarAccess().getRule();
	}
	
	//@ Override terminal ID:
	//	'^'? 'a'..'z' ('A'..'Z' | 'a'..'z' | '0'..'9' | '_')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal NUMBER1:
	//	INT;
	public TerminalRule getNUMBER1Rule() {
		return tNUMBER1;
	}
	
	//terminal VARIABLE:
	//	'A'..'Z';
	public TerminalRule getVARIABLERule() {
		return tVARIABLE;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
