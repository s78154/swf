/*
 * generated by Xtext 2.13.0
 */
grammar InternalS78154S78236;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package beleg.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package beleg.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import beleg.services.S78154S78236GrammarAccess;

}

@parser::members {

 	private S78154S78236GrammarAccess grammarAccess;

    public InternalS78154S78236Parser(TokenStream input, S78154S78236GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected S78154S78236GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getModelPrologDslParserRuleCall_0());
			}
			lv_model_0_0=rulePrologDsl
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				set(
					$current,
					"model",
					lv_model_0_0,
					"beleg.S78154S78236.PrologDsl");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulePrologDsl
entryRulePrologDsl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrologDslRule()); }
	iv_rulePrologDsl=rulePrologDsl
	{ $current=$iv_rulePrologDsl.current; }
	EOF;

// Rule PrologDsl
rulePrologDsl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrologDslAccess().getProgramProgramParserRuleCall_0_0());
				}
				lv_program_0_0=ruleProgram
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrologDslRule());
					}
					set(
						$current,
						"program",
						lv_program_0_0,
						"beleg.S78154S78236.Program");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPrologDslAccess().getExQueryExqueryParserRuleCall_1_0());
				}
				lv_exQuery_1_0=ruleExquery
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrologDslRule());
					}
					set(
						$current,
						"exQuery",
						lv_exQuery_1_0,
						"beleg.S78154S78236.Exquery");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getProgramAccess().getClausesClauseParserRuleCall_0());
			}
			lv_clauses_0_0=ruleClause
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getProgramRule());
				}
				add(
					$current,
					"clauses",
					lv_clauses_0_0,
					"beleg.S78154S78236.Clause");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleExquery
entryRuleExquery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExqueryRule()); }
	iv_ruleExquery=ruleExquery
	{ $current=$iv_ruleExquery.current; }
	EOF;

// Rule Exquery
ruleExquery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='?-'
		{
			newLeafNode(otherlv_0, grammarAccess.getExqueryAccess().getQuestionMarkHyphenMinusKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExqueryAccess().getQueryQueryParserRuleCall_1_0());
				}
				lv_query_1_0=ruleQuery
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExqueryRule());
					}
					set(
						$current,
						"query",
						lv_query_1_0,
						"beleg.S78154S78236.Query");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getExqueryAccess().getFullStopKeyword_2());
		}
	)
;

// Entry rule entryRuleQuery
entryRuleQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQueryRule()); }
	iv_ruleQuery=ruleQuery
	{ $current=$iv_ruleQuery.current; }
	EOF;

// Rule Query
ruleQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getQueryAccess().getPredicatePredicateParserRuleCall_0_0());
				}
				lv_predicate_0_0=rulePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQueryRule());
					}
					set(
						$current,
						"predicate",
						lv_predicate_0_0,
						"beleg.S78154S78236.Predicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getQueryAccess().getEpredicatesEPredicateParserRuleCall_1_0());
				}
				lv_epredicates_1_0=ruleEPredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQueryRule());
					}
					add(
						$current,
						"epredicates",
						lv_epredicates_1_0,
						"beleg.S78154S78236.EPredicate");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleEPredicate
entryRuleEPredicate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEPredicateRule()); }
	iv_ruleEPredicate=ruleEPredicate
	{ $current=$iv_ruleEPredicate.current; }
	EOF;

// Rule EPredicate
ruleEPredicate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=','
		{
			newLeafNode(otherlv_0, grammarAccess.getEPredicateAccess().getCommaKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEPredicateAccess().getPredicatePredicateParserRuleCall_1_0());
				}
				lv_predicate_1_0=rulePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEPredicateRule());
					}
					set(
						$current,
						"predicate",
						lv_predicate_1_0,
						"beleg.S78154S78236.Predicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleClause
entryRuleClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClauseRule()); }
	iv_ruleClause=ruleClause
	{ $current=$iv_ruleClause.current; }
	EOF;

// Rule Clause
ruleClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getClauseAccess().getPredicatePredicateParserRuleCall_0_0());
				}
				lv_predicate_0_0=rulePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClauseRule());
					}
					set(
						$current,
						"predicate",
						lv_predicate_0_0,
						"beleg.S78154S78236.Predicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getClauseAccess().getFactFactParserRuleCall_1_0_0());
					}
					lv_fact_1_0=ruleFact
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClauseRule());
						}
						set(
							$current,
							"fact",
							lv_fact_1_0,
							"beleg.S78154S78236.Fact");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getClauseAccess().getRuleRuleParserRuleCall_1_1_0());
					}
					lv_rule_2_0=ruleRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClauseRule());
						}
						set(
							$current,
							"rule",
							lv_rule_2_0,
							"beleg.S78154S78236.Rule");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleFact
entryRuleFact returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFactRule()); }
	iv_ruleFact=ruleFact
	{ $current=$iv_ruleFact.current; }
	EOF;

// Rule Fact
ruleFact returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_fact_0_0='.'
			{
				newLeafNode(lv_fact_0_0, grammarAccess.getFactAccess().getFactFullStopKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFactRule());
				}
				setWithLastConsumed($current, "fact", lv_fact_0_0, ".");
			}
		)
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=':-'
		{
			newLeafNode(otherlv_0, grammarAccess.getRuleAccess().getColonHyphenMinusKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getRuleAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getTermTermParserRuleCall_2_0());
				}
				lv_term_2_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"term",
						lv_term_2_0,
						"beleg.S78154S78236.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getEtermsETermParserRuleCall_3_0());
				}
				lv_eterms_3_0=ruleETerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					add(
						$current,
						"eterms",
						lv_eterms_3_0,
						"beleg.S78154S78236.ETerm");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getRuleAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRulePredicate
entryRulePredicate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredicateRule()); }
	iv_rulePredicate=rulePredicate
	{ $current=$iv_rulePredicate.current; }
	EOF;

// Rule Predicate
rulePredicate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPredicateAccess().getFunctorFunctorParserRuleCall_0_0());
				}
				lv_functor_0_0=ruleFunctor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredicateRule());
					}
					set(
						$current,
						"functor",
						lv_functor_0_0,
						"beleg.S78154S78236.Functor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getPredicateAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPredicateAccess().getTermTermParserRuleCall_2_0());
				}
				lv_term_2_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredicateRule());
					}
					set(
						$current,
						"term",
						lv_term_2_0,
						"beleg.S78154S78236.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPredicateAccess().getEtermsETermParserRuleCall_3_0());
				}
				lv_eterms_3_0=ruleETerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredicateRule());
					}
					add(
						$current,
						"eterms",
						lv_eterms_3_0,
						"beleg.S78154S78236.ETerm");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getPredicateAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleFunctor
entryRuleFunctor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctorRule()); }
	iv_ruleFunctor=ruleFunctor
	{ $current=$iv_ruleFunctor.current; }
	EOF;

// Rule Functor
ruleFunctor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getFunctorAccess().getIdentIdentParserRuleCall_0());
			}
			lv_ident_0_0=ruleIdent
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getFunctorRule());
				}
				set(
					$current,
					"ident",
					lv_ident_0_0,
					"beleg.S78154S78236.Ident");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	iv_ruleTerm=ruleTerm
	{ $current=$iv_ruleTerm.current; }
	EOF;

// Rule Term
ruleTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTermAccess().getAtomAtomParserRuleCall_0_0());
				}
				lv_atom_0_0=ruleAtom
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTermRule());
					}
					set(
						$current,
						"atom",
						lv_atom_0_0,
						"beleg.S78154S78236.Atom");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTermAccess().getListListParserRuleCall_1_0());
				}
				lv_list_1_0=ruleList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTermRule());
					}
					set(
						$current,
						"list",
						lv_list_1_0,
						"beleg.S78154S78236.List");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleETerm
entryRuleETerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getETermRule()); }
	iv_ruleETerm=ruleETerm
	{ $current=$iv_ruleETerm.current; }
	EOF;

// Rule ETerm
ruleETerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=','
		{
			newLeafNode(otherlv_0, grammarAccess.getETermAccess().getCommaKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getETermAccess().getTermTermParserRuleCall_1_0());
				}
				lv_term_1_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getETermRule());
					}
					set(
						$current,
						"term",
						lv_term_1_0,
						"beleg.S78154S78236.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	iv_ruleAtom=ruleAtom
	{ $current=$iv_ruleAtom.current; }
	EOF;

// Rule Atom
ruleAtom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAtomAccess().getIdentIdentParserRuleCall_0_0());
				}
				lv_ident_0_0=ruleIdent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAtomRule());
					}
					set(
						$current,
						"ident",
						lv_ident_0_0,
						"beleg.S78154S78236.Ident");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_number_1_0=RULE_NUMBER
				{
					newLeafNode(lv_number_1_0, grammarAccess.getAtomAccess().getNumberNUMBERTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtomRule());
					}
					setWithLastConsumed(
						$current,
						"number",
						lv_number_1_0,
						"beleg.S78154S78236.NUMBER");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getAtomAccess().getEvarEVarParserRuleCall_2_0());
				}
				lv_evar_2_0=ruleEVar
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAtomRule());
					}
					set(
						$current,
						"evar",
						lv_evar_2_0,
						"beleg.S78154S78236.EVar");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleList
entryRuleList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListRule()); }
	iv_ruleList=ruleList
	{ $current=$iv_ruleList.current; }
	EOF;

// Rule List
ruleList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getListAccess().getEmptyEmptyListParserRuleCall_0_0());
				}
				lv_empty_0_0=ruleEmptyList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListRule());
					}
					set(
						$current,
						"empty",
						lv_empty_0_0,
						"beleg.S78154S78236.EmptyList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getListAccess().getNonEmptyListNonEmptyListParserRuleCall_1_0());
				}
				lv_nonEmptyList_1_0=ruleNonEmptyList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListRule());
					}
					set(
						$current,
						"nonEmptyList",
						lv_nonEmptyList_1_0,
						"beleg.S78154S78236.NonEmptyList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEmptyList
entryRuleEmptyList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEmptyListRule()); }
	iv_ruleEmptyList=ruleEmptyList
	{ $current=$iv_ruleEmptyList.current; }
	EOF;

// Rule EmptyList
ruleEmptyList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEmptyListAccess().getEmptyListAction_0(),
					$current);
			}
		)
		otherlv_1='[]'
		{
			newLeafNode(otherlv_1, grammarAccess.getEmptyListAccess().getLeftSquareBracketRightSquareBracketKeyword_1());
		}
	)
;

// Entry rule entryRuleNonEmptyList
entryRuleNonEmptyList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNonEmptyListRule()); }
	iv_ruleNonEmptyList=ruleNonEmptyList
	{ $current=$iv_ruleNonEmptyList.current; }
	EOF;

// Rule NonEmptyList
ruleNonEmptyList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNonEmptyListAccess().getEfolgeEFolgeParserRuleCall_0_0());
				}
				lv_efolge_0_0=ruleEFolge
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNonEmptyListRule());
					}
					set(
						$current,
						"efolge",
						lv_efolge_0_0,
						"beleg.S78154S78236.EFolge");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getNonEmptyListAccess().getElistEListParserRuleCall_1_0());
				}
				lv_elist_1_0=ruleEList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNonEmptyListRule());
					}
					set(
						$current,
						"elist",
						lv_elist_1_0,
						"beleg.S78154S78236.EList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFolge
entryRuleFolge returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFolgeRule()); }
	iv_ruleFolge=ruleFolge
	{ $current=$iv_ruleFolge.current; }
	EOF;

// Rule Folge
ruleFolge returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFolgeAccess().getAtomAtomParserRuleCall_0_0());
				}
				lv_atom_0_0=ruleAtom
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFolgeRule());
					}
					set(
						$current,
						"atom",
						lv_atom_0_0,
						"beleg.S78154S78236.Atom");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFolgeAccess().getEatomsEAtomParserRuleCall_1_0());
				}
				lv_eatoms_1_0=ruleEAtom
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFolgeRule());
					}
					add(
						$current,
						"eatoms",
						lv_eatoms_1_0,
						"beleg.S78154S78236.EAtom");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleEFolge
entryRuleEFolge returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEFolgeRule()); }
	iv_ruleEFolge=ruleEFolge
	{ $current=$iv_ruleEFolge.current; }
	EOF;

// Rule EFolge
ruleEFolge returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getEFolgeAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEFolgeAccess().getFolgeFolgeParserRuleCall_1_0());
				}
				lv_folge_1_0=ruleFolge
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEFolgeRule());
					}
					set(
						$current,
						"folge",
						lv_folge_1_0,
						"beleg.S78154S78236.Folge");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=']'
		{
			newLeafNode(otherlv_2, grammarAccess.getEFolgeAccess().getRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleEList
entryRuleEList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEListRule()); }
	iv_ruleEList=ruleEList
	{ $current=$iv_ruleEList.current; }
	EOF;

// Rule EList
ruleEList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getEListAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEListAccess().getAtomAtomParserRuleCall_1_0());
				}
				lv_atom_1_0=ruleAtom
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEListRule());
					}
					set(
						$current,
						"atom",
						lv_atom_1_0,
						"beleg.S78154S78236.Atom");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='|'
		{
			newLeafNode(otherlv_2, grammarAccess.getEListAccess().getVerticalLineKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEListAccess().getTermTermParserRuleCall_3_0());
				}
				lv_term_3_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEListRule());
					}
					set(
						$current,
						"term",
						lv_term_3_0,
						"beleg.S78154S78236.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getEListAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleEAtom
entryRuleEAtom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEAtomRule()); }
	iv_ruleEAtom=ruleEAtom
	{ $current=$iv_ruleEAtom.current; }
	EOF;

// Rule EAtom
ruleEAtom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=','
		{
			newLeafNode(otherlv_0, grammarAccess.getEAtomAccess().getCommaKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEAtomAccess().getAtomAtomParserRuleCall_1_0());
				}
				lv_atom_1_0=ruleAtom
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEAtomRule());
					}
					set(
						$current,
						"atom",
						lv_atom_1_0,
						"beleg.S78154S78236.Atom");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIdent
entryRuleIdent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdentRule()); }
	iv_ruleIdent=ruleIdent
	{ $current=$iv_ruleIdent.current; }
	EOF;

// Rule Ident
ruleIdent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_ident_0_0=RULE_ID
			{
				newLeafNode(lv_ident_0_0, grammarAccess.getIdentAccess().getIdentIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIdentRule());
				}
				setWithLastConsumed(
					$current,
					"ident",
					lv_ident_0_0,
					"beleg.S78154S78236.ID");
			}
		)
	)
;

// Entry rule entryRuleEVar
entryRuleEVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEVarRule()); }
	iv_ruleEVar=ruleEVar
	{ $current=$iv_ruleEVar.current; }
	EOF;

// Rule EVar
ruleEVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_variable_0_0=RULE_VARIABLE
			{
				newLeafNode(lv_variable_0_0, grammarAccess.getEVarAccess().getVariableVARIABLETerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getEVarRule());
				}
				setWithLastConsumed(
					$current,
					"variable",
					lv_variable_0_0,
					"beleg.S78154S78236.VARIABLE");
			}
		)
	)
;

RULE_ID : '^'? 'a'..'z' ('A'..'Z'|'a'..'z'|'0'..'9'|'_')*;

RULE_NUMBER : RULE_INT;

RULE_VARIABLE : 'A'..'Z';

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
